/* tslint:disable */
/* eslint-disable */
/**
 * Businesses API
 * Information about businesses
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  Category,
  CategoryFromJSON,
  CategoryFromJSONTyped,
  CategoryToJSON,
  Hour,
  HourFromJSON,
  HourFromJSONTyped,
  HourToJSON,
  Location,
  LocationFromJSON,
  LocationFromJSONTyped,
  LocationToJSON,
} from './';

/**
 *
 * @export
 * @interface Business
 */
export interface Business {
  /**
   * the name of the business
   * @type {string}
   * @memberof Business
   */
  name?: string;
  /**
   * the URL of the business
   * @type {string}
   * @memberof Business
   */
  url?: string;
  /**
   * the categories this business belongs to
   * @type {Array<Category>}
   * @memberof Business
   */
  categories?: Array<Category>;
  /**
   *
   * @type {Location}
   * @memberof Business
   */
  location?: Location;
  /**
   * the hours of operation for this business
   * @type {Array<Hour>}
   * @memberof Business
   */
  hours?: Array<Hour>;
}

export function BusinessFromJSON(json: any): Business {
  return BusinessFromJSONTyped(json, false);
}

export function BusinessFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Business {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name'],
    url: !exists(json, 'url') ? undefined : json['url'],
    categories: !exists(json, 'categories')
      ? undefined
      : (json['categories'] as Array<any>).map(CategoryFromJSON),
    location: !exists(json, 'location') ? undefined : json['location'],
    hours: !exists(json, 'hours')
      ? undefined
      : (json['hours'] as Array<any>).map(HourFromJSON),
  };
}

export function BusinessToJSON(value?: Business | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    url: value.url,
    categories:
      value.categories === undefined
        ? undefined
        : (value.categories as Array<any>).map(CategoryToJSON),
    location: value.location,
    hours:
      value.hours === undefined
        ? undefined
        : (value.hours as Array<any>).map(HourToJSON),
  };
}
